# API Gateway Helm Chart Values
# Version: 1.0.0

# Replica configuration for high availability
replicaCount: 3
revisionHistoryLimit: 5

# Container image configuration
image:
  repository: api-gateway
  tag: latest
  pullPolicy: Always

# Service account configuration
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: ${IAM_ROLE_ARN}
  name: ""

# Pod annotations for monitoring
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "metrics"
  prometheus.io/path: "/metrics"

# Security context configurations
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true

securityContext:
  capabilities:
    drop: ["ALL"]
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  protocol: TCP
  sessionAffinity: ClientIP

# Ingress configuration with enhanced security
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: api.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: api-tls
      hosts:
        - api.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi

# Horizontal Pod Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Pods
          value: 2
          periodSeconds: 30

# Node selection and affinity rules
nodeSelector:
  kubernetes.io/os: linux

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - api-gateway
          topologyKey: kubernetes.io/hostname

# Environment variables
env:
  NODE_ENV: production
  PORT: 3000
  LOG_LEVEL: info
  METRICS_PORT: 9090

# Application configuration
config:
  cors:
    allowedOrigins:
      - https://app.example.com
    allowedMethods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowedHeaders:
      - Content-Type
      - Authorization
    exposedHeaders:
      - X-Total-Count
    maxAge: 86400
    credentials: true
  
  rateLimit:
    enabled: true
    windowMs: 60000
    maxRequestsPerIp: 100
    maxRequestsPerUser:
      admin: 1000
      teamLead: 500
      developer: 200
      analyst: 100
      viewer: 50
    skipPaths:
      - /health
      - /metrics
    headers: true
  
  auth:
    jwtSecret: ${JWT_SECRET}
    tokenExpiration: 1h
    refreshTokenExpiration: 7d
    cookieSecure: true
    cookieHttpOnly: true
    cookieSameSite: strict

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 15s
    scrapeTimeout: 14s
    labels:
      release: prometheus
    path: /metrics
    port: metrics
  healthCheck:
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5

# Redis configuration for session and rate limiting
redis:
  enabled: true
  host: redis-master
  port: 6379
  password: ${REDIS_PASSWORD}
  db: 0
  tls: true
  sentinel:
    enabled: true
    masterSet: mymaster
  cluster:
    enabled: false