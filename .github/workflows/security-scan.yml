# Security scanning workflow for workflow automation platform
# Version: 1.0.0
# Implements comprehensive security testing and compliance validation
name: Security Scan

on:
  schedule:
    # Run weekly on Sunday at midnight
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allow manual trigger
  pull_request:
    branches: ['main']

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCAN_SEVERITY_THRESHOLD: HIGH

jobs:
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd src/backend && npm ci
          cd ../web && npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit for backend..."
          cd src/backend && npm audit --audit-level=${{ env.SCAN_SEVERITY_THRESHOLD }}
          echo "Running npm audit for frontend..."
          cd ../web && npm audit --audit-level=${{ env.SCAN_SEVERITY_THRESHOLD }}

      - name: Run Snyk scan
        uses: snyk/actions@0.4.0
        with:
          command: test
          args: --severity-threshold=${{ env.SCAN_SEVERITY_THRESHOLD }}

      - name: Generate dependency report
        run: |
          echo "# Dependency Security Report" > dependency-report.md
          echo "## NPM Audit Results" >> dependency-report.md
          cd src/backend && npm audit --json | tee -a ../../dependency-report.md
          cd ../web && npm audit --json | tee -a ../../dependency-report.md
          echo "## Snyk Scan Results" >> dependency-report.md
          snyk test --json | tee -a dependency-report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-report.md

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript, python, go
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript,typescript,python,go"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [ci-workflow.container_build]
    steps:
      - name: Download container artifacts
        uses: actions/download-artifact@v3
        with:
          name: container-images

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: './container-images/*.tar'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: ${{ env.SCAN_SEVERITY_THRESHOLD }}

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Check licenses
        run: |
          # Create allowed license list
          ALLOWED_LICENSES=(MIT Apache-2.0 BSD-3-Clause)
          
          echo "Checking backend licenses..."
          cd src/backend
          npm ci
          npm list --json | jq -r '.dependencies | to_entries[] | .key + ":" + .value.license' > ../../license-report.txt
          
          echo "Checking frontend licenses..."
          cd ../web
          npm ci
          npm list --json | jq -r '.dependencies | to_entries[] | .key + ":" + .value.license' >> ../../license-report.txt
          
          # Check for non-compliant licenses
          while IFS=: read -r package license; do
            if [[ ! " ${ALLOWED_LICENSES[@]} " =~ " ${license} " ]]; then
              echo "Non-compliant license found: $package uses $license"
              exit 1
            fi
          done < ../../license-report.txt

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: license-report.txt

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [dependency-check, sast-scan, container-scan, license-check]
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v3

      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance-report.md
          echo "## SOC2 Controls" >> compliance-report.md
          echo "- Access Control: Validated through SAST" >> compliance-report.md
          echo "- System Security: Validated through container scanning" >> compliance-report.md
          echo "- Change Management: Validated through dependency checks" >> compliance-report.md
          
          echo "## HIPAA Controls" >> compliance-report.md
          echo "- Security Management: Validated" >> compliance-report.md
          echo "- Access Control: Validated" >> compliance-report.md
          echo "- Audit Controls: Validated" >> compliance-report.md
          
          echo "## GDPR Controls" >> compliance-report.md
          echo "- Data Protection: Validated through SAST" >> compliance-report.md
          echo "- Security Controls: Validated through scanning" >> compliance-report.md
          
          echo "## PCI DSS Controls" >> compliance-report.md
          echo "- Secure Systems: Validated through container scanning" >> compliance-report.md
          echo "- Access Control: Validated through SAST" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md

      - name: Check compliance status
        run: |
          # Validate all reports meet compliance requirements
          if grep -q "HIGH" dependency-report/dependency-report.md; then
            echo "High severity dependencies found - failing compliance check"
            exit 1
          fi
          
          if grep -q "HIGH" trivy-results.sarif; then
            echo "High severity container vulnerabilities found - failing compliance check"
            exit 1
          fi
          
          if [ -f "license-report/non-compliant.txt" ]; then
            echo "Non-compliant licenses found - failing compliance check"
            exit 1
          fi