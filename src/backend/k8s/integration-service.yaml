apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration-service
  namespace: workflow-platform
  labels:
    app: workflow-platform
    service: integration-service
    environment: production
    version: 1.0.0
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      service: integration-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        service: integration-service
        environment: production
        version: 1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3002"
        prometheus.io/path: "/metrics"
        checksum/config: "${CONFIG_CHECKSUM}"
        checksum/secrets: "${SECRETS_CHECKSUM}"
    spec:
      # Pod anti-affinity to spread replicas across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - integration-service
              topologyKey: kubernetes.io/hostname

      containers:
      - name: integration-service
        image: workflow-platform/integration-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3002
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Resource limits and requests
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 512Mi

        # Environment variables from ConfigMap and Secrets
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: workflow-platform-config
              key: integration_service.PORT
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: workflow-platform-config
              key: integration_service.NODE_ENV
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: workflow-platform-config
              key: integration_service.CORS_ORIGIN
        - name: RATE_LIMIT_WINDOW
          valueFrom:
            configMapKeyRef:
              name: workflow-platform-config
              key: integration_service.RATE_LIMIT_WINDOW
        - name: RATE_LIMIT_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: workflow-platform-config
              key: integration_service.RATE_LIMIT_MAX_REQUESTS
        - name: OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: workflow-platform-secrets
              key: OAUTH_CLIENT_ID
        - name: OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: workflow-platform-secrets
              key: OAUTH_CLIENT_SECRET
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: workflow-platform-secrets
              key: ENCRYPTION_KEY
        - name: API_KEYS
          valueFrom:
            secretKeyRef:
              name: workflow-platform-secrets
              key: API_KEYS

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30

        # Security context for container
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL

        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
          readOnly: false

      # Pod security context
      securityContext:
        fsGroup: 1000

      # Volumes definition
      volumes:
      - name: tmp
        emptyDir: {}

      # Graceful termination period
      terminationGracePeriodSeconds: 60